{"message":"the method `insert` exists for struct `UnorderedMap<std::string::String, donation::Product>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/donation.rs","byte_start":494,"byte_end":512,"line_start":19,"line_end":19,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Product {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `donation::Product: BorshDeserialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/donation.rs","byte_start":494,"byte_end":512,"line_start":19,"line_end":19,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"pub struct Product {","highlight_start":1,"highlight_end":19}],"label":"doesn't satisfy `donation::Product: BorshSerialize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/donation.rs","byte_start":2181,"byte_end":2187,"line_start":72,"line_end":72,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"    self.products.insert(String::from(\"p1\"),new_product);","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`donation::Product: BorshSerialize`\n`donation::Product: BorshDeserialize`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following traits must be implemented","code":null,"level":"note","spans":[{"file_name":"/Users/stoic/.cargo/registry/src/github.com-1ecc6299db9ec823/borsh-0.9.3/src/de/mod.rs","byte_start":858,"byte_end":1767,"line_start":30,"line_end":60,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait BorshDeserialize: Sized {","highlight_start":1,"highlight_end":36},{"text":"    /// Deserializes this instance from a given slice of bytes.","highlight_start":1,"highlight_end":64},{"text":"    /// Updates the buffer to point at the remaining bytes.","highlight_start":1,"highlight_end":60},{"text":"    fn deserialize(buf: &mut &[u8]) -> Result<Self>;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Deserialize this instance from a slice of bytes.","highlight_start":1,"highlight_end":57},{"text":"    fn try_from_slice(v: &[u8]) -> Result<Self> {","highlight_start":1,"highlight_end":50},{"text":"        let mut v_mut = v;","highlight_start":1,"highlight_end":27},{"text":"        let result = Self::deserialize(&mut v_mut)?;","highlight_start":1,"highlight_end":53},{"text":"        if !v_mut.is_empty() {","highlight_start":1,"highlight_end":31},{"text":"            return Err(Error::new(ErrorKind::InvalidData, ERROR_NOT_ALL_BYTES_READ));","highlight_start":1,"highlight_end":86},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Ok(result)","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[inline]","highlight_start":1,"highlight_end":14},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    fn vec_from_bytes(len: u32, buf: &mut &[u8]) -> Result<Option<Vec<Self>>> {","highlight_start":1,"highlight_end":80},{"text":"        let _ = len;","highlight_start":1,"highlight_end":21},{"text":"        let _ = buf;","highlight_start":1,"highlight_end":21},{"text":"        Ok(None)","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[inline]","highlight_start":1,"highlight_end":14},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    fn copy_from_bytes(buf: &mut &[u8], out: &mut [Self]) -> Result<bool> {","highlight_start":1,"highlight_end":76},{"text":"        let _ = buf;","highlight_start":1,"highlight_end":21},{"text":"        let _ = out;","highlight_start":1,"highlight_end":21},{"text":"        Ok(false)","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/stoic/.cargo/registry/src/github.com-1ecc6299db9ec823/borsh-0.9.3/src/ser/mod.rs","byte_start":1237,"byte_end":1732,"line_start":43,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait BorshSerialize {","highlight_start":1,"highlight_end":27},{"text":"    fn serialize<W: Write>(&self, writer: &mut W) -> Result<()>;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Serialize this instance into a vector of bytes.","highlight_start":1,"highlight_end":56},{"text":"    fn try_to_vec(&self) -> Result<Vec<u8>> {","highlight_start":1,"highlight_end":46},{"text":"        let mut result = Vec::with_capacity(DEFAULT_SERIALIZER_CAPACITY);","highlight_start":1,"highlight_end":74},{"text":"        self.serialize(&mut result)?;","highlight_start":1,"highlight_end":38},{"text":"        Ok(result)","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[inline]","highlight_start":1,"highlight_end":14},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    fn u8_slice(slice: &[Self]) -> Option<&[u8]>","highlight_start":1,"highlight_end":49},{"text":"    where","highlight_start":1,"highlight_end":10},{"text":"        Self: Sized,","highlight_start":1,"highlight_end":21},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        let _ = slice;","highlight_start":1,"highlight_end":23},{"text":"        None","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `insert` exists for struct `UnorderedMap<std::string::String, donation::Product>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/donation.rs:72:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Product {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `donation::Product: BorshDeserialize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `donation::Product: BorshSerialize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    self.products.insert(String::from(\"p1\"),new_product);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `donation::Product: BorshSerialize`\u001b[0m\n\u001b[0m           `donation::Product: BorshDeserialize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the following traits must be implemented\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/stoic/.cargo/registry/src/github.com-1ecc6299db9ec823/borsh-0.9.3/src/de/mod.rs:30:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BorshDeserialize: Sized {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Deserializes this instance from a given slice of bytes.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Updates the buffer to point at the remaining bytes.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn deserialize(buf: &mut &[u8]) -> Result<Self>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/stoic/.cargo/registry/src/github.com-1ecc6299db9ec823/borsh-0.9.3/src/ser/mod.rs:43:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub trait BorshSerialize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    fn serialize<W: Write>(&self, writer: &mut W) -> Result<()>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    /// Serialize this instance into a vector of bytes.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
